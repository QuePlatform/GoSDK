// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package components

import (
	"encoding/json"
	"errors"
	"fmt"
	"github.com/QuePlatform/GoSDK/internal/utils"
)

type TypeLocal string

const (
	TypeLocalLocal TypeLocal = "local"
)

func (e TypeLocal) ToPointer() *TypeLocal {
	return &e
}
func (e *TypeLocal) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "local":
		*e = TypeLocal(v)
		return nil
	default:
		return fmt.Errorf("invalid value for TypeLocal: %v", v)
	}
}

type SignerRefDtoLocal struct {
	Type     TypeLocal `json:"type"`
	CertPath string    `json:"cert_path"`
	KeyPath  string    `json:"key_path"`
}

func (s SignerRefDtoLocal) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(s, "", false)
}

func (s *SignerRefDtoLocal) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &s, "", false, []string{"type", "cert_path", "key_path"}); err != nil {
		return err
	}
	return nil
}

func (s *SignerRefDtoLocal) GetType() TypeLocal {
	if s == nil {
		return TypeLocal("")
	}
	return s.Type
}

func (s *SignerRefDtoLocal) GetCertPath() string {
	if s == nil {
		return ""
	}
	return s.CertPath
}

func (s *SignerRefDtoLocal) GetKeyPath() string {
	if s == nil {
		return ""
	}
	return s.KeyPath
}

type TypeEnv string

const (
	TypeEnvEnv TypeEnv = "env"
)

func (e TypeEnv) ToPointer() *TypeEnv {
	return &e
}
func (e *TypeEnv) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "env":
		*e = TypeEnv(v)
		return nil
	default:
		return fmt.Errorf("invalid value for TypeEnv: %v", v)
	}
}

type SignerRefDtoEnv struct {
	Type    TypeEnv `json:"type"`
	CertVar string  `json:"cert_var"`
	KeyVar  string  `json:"key_var"`
}

func (s SignerRefDtoEnv) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(s, "", false)
}

func (s *SignerRefDtoEnv) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &s, "", false, []string{"type", "cert_var", "key_var"}); err != nil {
		return err
	}
	return nil
}

func (s *SignerRefDtoEnv) GetType() TypeEnv {
	if s == nil {
		return TypeEnv("")
	}
	return s.Type
}

func (s *SignerRefDtoEnv) GetCertVar() string {
	if s == nil {
		return ""
	}
	return s.CertVar
}

func (s *SignerRefDtoEnv) GetKeyVar() string {
	if s == nil {
		return ""
	}
	return s.KeyVar
}

type SignerRefDtoType string

const (
	SignerRefDtoTypeSignerRefDtoEnv   SignerRefDtoType = "SignerRefDto_Env"
	SignerRefDtoTypeSignerRefDtoLocal SignerRefDtoType = "SignerRefDto_Local"
)

// SignerRefDto - Reference to credentials for signing.
type SignerRefDto struct {
	SignerRefDtoEnv   *SignerRefDtoEnv   `queryParam:"inline" name:"SignerRefDto"`
	SignerRefDtoLocal *SignerRefDtoLocal `queryParam:"inline" name:"SignerRefDto"`

	Type SignerRefDtoType
}

func CreateSignerRefDtoSignerRefDtoEnv(signerRefDtoEnv SignerRefDtoEnv) SignerRefDto {
	typ := SignerRefDtoTypeSignerRefDtoEnv

	return SignerRefDto{
		SignerRefDtoEnv: &signerRefDtoEnv,
		Type:            typ,
	}
}

func CreateSignerRefDtoSignerRefDtoLocal(signerRefDtoLocal SignerRefDtoLocal) SignerRefDto {
	typ := SignerRefDtoTypeSignerRefDtoLocal

	return SignerRefDto{
		SignerRefDtoLocal: &signerRefDtoLocal,
		Type:              typ,
	}
}

func (u *SignerRefDto) UnmarshalJSON(data []byte) error {

	var signerRefDtoEnv SignerRefDtoEnv = SignerRefDtoEnv{}
	if err := utils.UnmarshalJSON(data, &signerRefDtoEnv, "", true, nil); err == nil {
		u.SignerRefDtoEnv = &signerRefDtoEnv
		u.Type = SignerRefDtoTypeSignerRefDtoEnv
		return nil
	}

	var signerRefDtoLocal SignerRefDtoLocal = SignerRefDtoLocal{}
	if err := utils.UnmarshalJSON(data, &signerRefDtoLocal, "", true, nil); err == nil {
		u.SignerRefDtoLocal = &signerRefDtoLocal
		u.Type = SignerRefDtoTypeSignerRefDtoLocal
		return nil
	}

	return fmt.Errorf("could not unmarshal `%s` into any supported union types for SignerRefDto", string(data))
}

func (u SignerRefDto) MarshalJSON() ([]byte, error) {
	if u.SignerRefDtoEnv != nil {
		return utils.MarshalJSON(u.SignerRefDtoEnv, "", true)
	}

	if u.SignerRefDtoLocal != nil {
		return utils.MarshalJSON(u.SignerRefDtoLocal, "", true)
	}

	return nil, errors.New("could not marshal union type SignerRefDto: all fields are null")
}
