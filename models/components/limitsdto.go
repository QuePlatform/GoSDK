// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package components

// LimitsDto - Optional limits for processing operations to prevent resource exhaustion. These limits apply to the streaming and processing phases of asset handling.
type LimitsDto struct {
	// Maximum allowed size for the asset file in bytes. This limit is enforced during the streaming download phase to prevent memory exhaustion.
	MaxAssetSizeBytes *int64 `json:"max_asset_size_bytes,omitempty"`
	// Maximum allowed size for the output (signed asset) in bytes. This prevents excessive storage usage for signed assets.
	MaxOutputSizeBytes *int64 `json:"max_output_size_bytes,omitempty"`
	// Maximum allowed bytes for stream copying operations during processing. This limits the amount of data that can be buffered in memory during the signing/verification process.
	MaxStreamCopyBytes *int64 `json:"max_stream_copy_bytes,omitempty"`
	// Timeout for streaming operations in milliseconds. This prevents hanging operations when downloading from slow sources.
	StreamTimeoutMs *int64 `json:"stream_timeout_ms,omitempty"`
}

func (l *LimitsDto) GetMaxAssetSizeBytes() *int64 {
	if l == nil {
		return nil
	}
	return l.MaxAssetSizeBytes
}

func (l *LimitsDto) GetMaxOutputSizeBytes() *int64 {
	if l == nil {
		return nil
	}
	return l.MaxOutputSizeBytes
}

func (l *LimitsDto) GetMaxStreamCopyBytes() *int64 {
	if l == nil {
		return nil
	}
	return l.MaxStreamCopyBytes
}

func (l *LimitsDto) GetStreamTimeoutMs() *int64 {
	if l == nil {
		return nil
	}
	return l.StreamTimeoutMs
}
