// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package components

import (
	"errors"
	"fmt"
	"github.com/QuePlatform/GoSDK/internal/utils"
)

type AssetRefDtoType string

const (
	AssetRefDtoTypeS3           AssetRefDtoType = "S3"
	AssetRefDtoTypePresignedURL AssetRefDtoType = "PresignedUrl"
)

// AssetRefDto - A reference to a digital asset, either stored in S3 or accessible via URL. Files are streamed efficiently to temporary storage during processing to minimize memory usage.
type AssetRefDto struct {
	S3           *S3           `queryParam:"inline" name:"AssetRefDto"`
	PresignedURL *PresignedURL `queryParam:"inline" name:"AssetRefDto"`

	Type AssetRefDtoType
}

func CreateAssetRefDtoS3(s3 S3) AssetRefDto {
	typ := AssetRefDtoTypeS3

	return AssetRefDto{
		S3:   &s3,
		Type: typ,
	}
}

func CreateAssetRefDtoPresignedURL(presignedURL PresignedURL) AssetRefDto {
	typ := AssetRefDtoTypePresignedURL

	return AssetRefDto{
		PresignedURL: &presignedURL,
		Type:         typ,
	}
}

func (u *AssetRefDto) UnmarshalJSON(data []byte) error {

	var s3 S3 = S3{}
	if err := utils.UnmarshalJSON(data, &s3, "", true, nil); err == nil {
		u.S3 = &s3
		u.Type = AssetRefDtoTypeS3
		return nil
	}

	var presignedURL PresignedURL = PresignedURL{}
	if err := utils.UnmarshalJSON(data, &presignedURL, "", true, nil); err == nil {
		u.PresignedURL = &presignedURL
		u.Type = AssetRefDtoTypePresignedURL
		return nil
	}

	return fmt.Errorf("could not unmarshal `%s` into any supported union types for AssetRefDto", string(data))
}

func (u AssetRefDto) MarshalJSON() ([]byte, error) {
	if u.S3 != nil {
		return utils.MarshalJSON(u.S3, "", true)
	}

	if u.PresignedURL != nil {
		return utils.MarshalJSON(u.PresignedURL, "", true)
	}

	return nil, errors.New("could not marshal union type AssetRefDto: all fields are null")
}
