// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package components

import (
	"encoding/json"
	"fmt"
	"github.com/QuePlatform/GoSDK/internal/utils"
	"time"
)

// Default trust policy when no specific rule applies.
type Default string

const (
	DefaultAllow Default = "allow"
	DefaultDeny  Default = "deny"
)

func (e Default) ToPointer() *Default {
	return &e
}
func (e *Default) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "allow":
		fallthrough
	case "deny":
		*e = Default(v)
		return nil
	default:
		return fmt.Errorf("invalid value for Default: %v", v)
	}
}

// Policy - Trust policy configuration defining default trust behavior.
type Policy struct {
	// Default trust policy when no specific rule applies.
	Default Default `json:"default"`
}

func (p *Policy) GetDefault() Default {
	if p == nil {
		return Default("")
	}
	return p.Default
}

// Data - The trust list data containing certificates and policies.
type Data struct {
	// List of trusted hardware manufacturers whose devices can create trusted provenance.
	Manufacturers []string `json:"manufacturers"`
	// List of trusted Certificate Authority certificates in PEM format.
	Cas []string `json:"cas"`
	// Trust policy configuration defining default trust behavior.
	Policy Policy `json:"policy"`
}

func (d *Data) GetManufacturers() []string {
	if d == nil {
		return []string{}
	}
	return d.Manufacturers
}

func (d *Data) GetCas() []string {
	if d == nil {
		return []string{}
	}
	return d.Cas
}

func (d *Data) GetPolicy() Policy {
	if d == nil {
		return Policy{}
	}
	return d.Policy
}

// TrustListResponse - The current C2PA trust list containing trusted certificate authorities, hardware manufacturers, and trust policies used for manifest verification.
type TrustListResponse struct {
	// Version identifier for this trust list bundle.
	Version string `json:"version"`
	// Timestamp when this trust list was issued.
	IssuedAt time.Time `json:"issued_at"`
	// The trust list data containing certificates and policies.
	Data Data `json:"data"`
}

func (t TrustListResponse) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(t, "", false)
}

func (t *TrustListResponse) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &t, "", false, []string{"version", "issued_at", "data"}); err != nil {
		return err
	}
	return nil
}

func (t *TrustListResponse) GetVersion() string {
	if t == nil {
		return ""
	}
	return t.Version
}

func (t *TrustListResponse) GetIssuedAt() time.Time {
	if t == nil {
		return time.Time{}
	}
	return t.IssuedAt
}

func (t *TrustListResponse) GetData() Data {
	if t == nil {
		return Data{}
	}
	return t.Data
}
