// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package components

import (
	"encoding/json"
	"fmt"
	"github.com/QuePlatform/GoSDK/optionalnullable"
)

// Assurance - The level of assurance provided by the signing process.
type Assurance string

const (
	AssuranceServerMeasured Assurance = "server_measured"
	AssuranceClientHash     Assurance = "client_hash"
)

func (e Assurance) ToPointer() *Assurance {
	return &e
}
func (e *Assurance) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "server_measured":
		fallthrough
	case "client_hash":
		*e = Assurance(v)
		return nil
	default:
		return fmt.Errorf("invalid value for Assurance: %v", v)
	}
}

// Alg - The cryptographic algorithm used for signing.
type Alg string

const (
	AlgEs256   Alg = "ES256"
	AlgPs256   Alg = "PS256"
	AlgEd25519 Alg = "Ed25519"
)

func (e Alg) ToPointer() *Alg {
	return &e
}
func (e *Alg) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "ES256":
		fallthrough
	case "PS256":
		fallthrough
	case "Ed25519":
		*e = Alg(v)
		return nil
	default:
		return fmt.Errorf("invalid value for Alg: %v", v)
	}
}

// Evidence - Cryptographic evidence about the signature that was applied.
type Evidence struct {
	// Identifier for the signing entity/key used.
	Signer string `json:"signer"`
	// The cryptographic algorithm used for signing.
	Alg Alg `json:"alg"`
}

func (e *Evidence) GetSigner() string {
	if e == nil {
		return ""
	}
	return e.Signer
}

func (e *Evidence) GetAlg() Alg {
	if e == nil {
		return Alg("")
	}
	return e.Alg
}

// SignResponse - The result of a successful signing operation. The signed asset is stored in S3 and the manifest is cryptographically embedded.
type SignResponse struct {
	// The level of assurance provided by the signing process.
	Assurance Assurance `json:"assurance"`
	// Cryptographic evidence about the signature that was applied.
	Evidence Evidence `json:"evidence"`
	// S3 URI of the signed asset. The signed asset is automatically uploaded to S3 with the embedded C2PA manifest.
	AssetS3URI optionalnullable.OptionalNullable[string] `json:"asset_s3_uri,omitempty"`
}

func (s *SignResponse) GetAssurance() Assurance {
	if s == nil {
		return Assurance("")
	}
	return s.Assurance
}

func (s *SignResponse) GetEvidence() Evidence {
	if s == nil {
		return Evidence{}
	}
	return s.Evidence
}

func (s *SignResponse) GetAssetS3URI() optionalnullable.OptionalNullable[string] {
	if s == nil {
		return nil
	}
	return s.AssetS3URI
}
