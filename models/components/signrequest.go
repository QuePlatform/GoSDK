// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package components

import (
	"encoding/json"
	"fmt"
	"github.com/QuePlatform/GoSDK/internal/utils"
)

// Mode - The signing mode to use.
// * `server_measure`: The server streams the asset, calculates its hash, and embeds the manifest. Requires `manifest_json`. This is the primary signing mode.
// * `client_hash`: The client provides the asset hash directly for offline signing. (Not yet implemented).
type Mode string

const (
	ModeServerMeasure Mode = "server_measure"
	ModeClientHash    Mode = "client_hash"
)

func (e Mode) ToPointer() *Mode {
	return &e
}
func (e *Mode) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "server_measure":
		fallthrough
	case "client_hash":
		*e = Mode(v)
		return nil
	default:
		return fmt.Errorf("invalid value for Mode: %v", v)
	}
}

// SignRequest - Request to sign a digital asset with a C2PA manifest. The asset is processed using memory-efficient streaming to temporary storage.
type SignRequest struct {
	// A reference to a digital asset, either stored in S3 or accessible via URL. Files are streamed efficiently to temporary storage during processing to minimize memory usage.
	Asset AssetRefDto `json:"asset"`
	// The signing mode to use.
	// * `server_measure`: The server streams the asset, calculates its hash, and embeds the manifest. Requires `manifest_json`. This is the primary signing mode.
	// * `client_hash`: The client provides the asset hash directly for offline signing. (Not yet implemented).
	//
	Mode Mode `json:"mode"`
	// JSON string containing the manifest to embed in the asset as a C2PA claim. This defines the provenance information and assertions about the asset. Required when `mode` is `server_measure`.
	ManifestJSON *string `json:"manifest_json,omitempty"`
	// Configuration to add a CAWG identity assertion during signing. Presence of this object enables CAWG.
	Cawg *CawgIdentityDto `json:"cawg,omitempty"`
	// Whether to allow HTTP (non-HTTPS) URLs for remote manifest resources. Disabled by default for security.
	AllowInsecureRemoteHTTP *bool `default:"false" json:"allow_insecure_remote_http"`
	// Optional limits for processing operations to prevent resource exhaustion. These limits apply to the streaming and processing phases of asset handling.
	Limits *LimitsDto `json:"limits,omitempty"`
}

func (s SignRequest) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(s, "", false)
}

func (s *SignRequest) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &s, "", false, []string{"asset", "mode"}); err != nil {
		return err
	}
	return nil
}

func (s *SignRequest) GetAsset() AssetRefDto {
	if s == nil {
		return AssetRefDto{}
	}
	return s.Asset
}

func (s *SignRequest) GetMode() Mode {
	if s == nil {
		return Mode("")
	}
	return s.Mode
}

func (s *SignRequest) GetManifestJSON() *string {
	if s == nil {
		return nil
	}
	return s.ManifestJSON
}

func (s *SignRequest) GetCawg() *CawgIdentityDto {
	if s == nil {
		return nil
	}
	return s.Cawg
}

func (s *SignRequest) GetAllowInsecureRemoteHTTP() *bool {
	if s == nil {
		return nil
	}
	return s.AllowInsecureRemoteHTTP
}

func (s *SignRequest) GetLimits() *LimitsDto {
	if s == nil {
		return nil
	}
	return s.Limits
}
