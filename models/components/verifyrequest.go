// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package components

import (
	"github.com/QuePlatform/GoSDK/internal/utils"
)

// VerifyRequest - Request to verify the C2PA manifest embedded in a digital asset. The asset is processed using memory-efficient streaming to temporary storage.
type VerifyRequest struct {
	// A reference to a digital asset, either stored in S3 or accessible via URL. Files are streamed efficiently to temporary storage during processing to minimize memory usage.
	Asset AssetRefDto `json:"asset"`
	// The level of detail to return in the verification report.
	// * `summary`: A high-level pass/fail result with basic trust status. Fastest option for simple validation.
	// * `info`: Basic information about the manifest, claims, and signing entities.
	// * `detailed`: Comprehensive details of all assertions, claims, signatures, and validation steps.
	// * `tree`: Hierarchical view of the manifest's ingredient relationships and provenance chain.
	//
	Mode *string `default:"summary" json:"mode"`
	// Whether to allow fetching and validating remote manifests referenced in the asset's C2PA data.
	AllowRemoteManifests *bool `default:"false" json:"allow_remote_manifests"`
	// Whether to allow HTTP (non-HTTPS) URLs when fetching remote manifest resources. Disabled by default for security.
	AllowInsecureRemoteHTTP *bool `default:"false" json:"allow_insecure_remote_http"`
	// Whether to include full certificate chains and cryptographic details in the verification report.
	IncludeCertificates *bool `default:"false" json:"include_certificates"`
	// Options controlling CAWG identity validation behavior during verification.
	Cawg *CawgVerifyDto `json:"cawg,omitempty"`
	// Optional limits for processing operations to prevent resource exhaustion. These limits apply to the streaming and processing phases of asset handling.
	Limits *LimitsDto `json:"limits,omitempty"`
}

func (v VerifyRequest) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(v, "", false)
}

func (v *VerifyRequest) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &v, "", false, []string{"asset"}); err != nil {
		return err
	}
	return nil
}

func (v *VerifyRequest) GetAsset() AssetRefDto {
	if v == nil {
		return AssetRefDto{}
	}
	return v.Asset
}

func (v *VerifyRequest) GetMode() *string {
	if v == nil {
		return nil
	}
	return v.Mode
}

func (v *VerifyRequest) GetAllowRemoteManifests() *bool {
	if v == nil {
		return nil
	}
	return v.AllowRemoteManifests
}

func (v *VerifyRequest) GetAllowInsecureRemoteHTTP() *bool {
	if v == nil {
		return nil
	}
	return v.AllowInsecureRemoteHTTP
}

func (v *VerifyRequest) GetIncludeCertificates() *bool {
	if v == nil {
		return nil
	}
	return v.IncludeCertificates
}

func (v *VerifyRequest) GetCawg() *CawgVerifyDto {
	if v == nil {
		return nil
	}
	return v.Cawg
}

func (v *VerifyRequest) GetLimits() *LimitsDto {
	if v == nil {
		return nil
	}
	return v.Limits
}
